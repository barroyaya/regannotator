# Generated by Django 5.2.3 on 2025-06-20 10:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('annotations', '0001_initial'),
        ('core', '0001_initial'),
        ('documents', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpertProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expertise_level', models.CharField(choices=[('junior', 'Junior (< 2 ans)'), ('confirmed', 'Confirmé (2-5 ans)'), ('senior', 'Senior (5-10 ans)'), ('expert', 'Expert (> 10 ans)')], default='junior', max_length=20)),
                ('specializations', models.JSONField(default=list)),
                ('company', models.CharField(blank=True, max_length=200)),
                ('position', models.CharField(blank=True, max_length=200)),
                ('years_experience', models.IntegerField(default=0)),
                ('certifications', models.TextField(blank=True)),
                ('annotation_speed', models.CharField(choices=[('slow', 'Minutieux'), ('normal', 'Normal'), ('fast', 'Rapide')], default='normal', max_length=20)),
                ('total_annotations_validated', models.IntegerField(default=0)),
                ('total_feedbacks_given', models.IntegerField(default=0)),
                ('average_validation_time', models.FloatField(default=0.0)),
                ('accuracy_score', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('preferred_entities', models.ManyToManyField(blank=True, related_name='preferred_by_experts', to='core.regulatoryentity')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='expert_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Expert',
                'verbose_name_plural': 'Profils Experts',
            },
        ),
        migrations.CreateModel(
            name='ExpertSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('annotations_validated', models.IntegerField(default=0)),
                ('annotations_rejected', models.IntegerField(default=0)),
                ('feedbacks_created', models.IntegerField(default=0)),
                ('documents_reviewed', models.IntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='experts.expertprofile')),
            ],
            options={
                'verbose_name': 'Session Expert',
                'verbose_name_plural': 'Sessions Experts',
            },
        ),
        migrations.CreateModel(
            name='ExpertTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task_type', models.CharField(choices=[('validation', "Validation d'annotations"), ('review', 'Révision de document'), ('training', 'Formation de modèle'), ('quality_check', 'Contrôle qualité')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('normal', 'Normale'), ('high', 'Haute'), ('urgent', 'Urgente')], default='normal', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('in_progress', 'En cours'), ('completed', 'Terminée'), ('cancelled', 'Annulée')], default='pending', max_length=20)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('result_notes', models.TextField(blank=True)),
                ('quality_score', models.FloatField(blank=True, null=True)),
                ('annotations', models.ManyToManyField(blank=True, to='annotations.annotation')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='documents.document')),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='experts.expertprofile')),
            ],
            options={
                'verbose_name': 'Tâche Expert',
                'verbose_name_plural': 'Tâches Experts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExpertSpecialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('proficiency_level', models.IntegerField(choices=[(1, 'Débutant'), (2, 'Intermédiaire'), (3, 'Avancé'), (4, 'Expert'), (5, 'Référent')], default=1)),
                ('annotations_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('entity_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.regulatoryentity')),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specialties', to='experts.expertprofile')),
            ],
            options={
                'verbose_name': 'Spécialité Expert',
                'verbose_name_plural': 'Spécialités Experts',
                'unique_together': {('expert', 'entity_type')},
            },
        ),
    ]
